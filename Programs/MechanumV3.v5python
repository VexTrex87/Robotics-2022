{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nfront_left_wheel = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nfront_right_wheel = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nback_left_wheel = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nback_right_wheel = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nauton_selector = Bumper(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport math\n\n# Begin project code\nclass Robot():\n    def __init__(self):\n        self.MOTORS = [front_left_wheel, front_right_wheel, back_left_wheel, back_right_wheel]\n        self.AUTONS = [\n            [\"left\", self.left],\n            [\"left_center\", self.left_center],\n            [\"left_bonus\", self.left_bonus],\n            [\"left_center_bonus\", self.left_center_bonus],\n            [\"right\", self.right],\n            [\"right_center\", self.right_center],\n            [\"right_bonus\", self.right_bonus],\n            [\"right_center_bonus\", self.right_center_bonus],\n            [\"center\", self.center],\n            [\"center_leftbonus\", self.center_leftbonus],\n            [\"center_rightbonus\", self.center_rightbonus],\n        ]\n        self.selected_auton = 0\n        self.current_team = Color.RED\n        self.pressed_time = 0\n\n        Competition(self.driver_controlled, self.autonomous)\n        auton_selector.pressed(self.on_auton_pressed)  \n        auton_selector.released(self.on_auton_released)\n\n        while True:\n            self.update_brain()\n            wait(0.3, SECONDS)\n\n    def move_drivetrain(self):\n        vertical_power = controller_1.axis3.position()\n        turn_power = controller_1.axis1.position()\n        horizontal_strafe = controller_1.axis4.position()\n\n        front_left_velocity = vertical_power + turn_power + horizontal_strafe\n        front_right_velocity = vertical_power - turn_power - horizontal_strafe\n        back_left_velocity = vertical_power + turn_power - horizontal_strafe\n        back_right_velocity = vertical_power - turn_power + horizontal_strafe\n\n        front_left_wheel.spin(FORWARD)\n        front_right_wheel.spin(FORWARD)\n        back_left_wheel.spin(FORWARD)\n        back_right_wheel.spin(FORWARD)\n\n        front_left_wheel.set_velocity(front_left_velocity, PERCENT)\n        front_right_wheel.set_velocity(front_right_velocity, PERCENT)\n        back_left_wheel.set_velocity(back_left_velocity, PERCENT)\n        back_right_wheel.set_velocity(back_right_velocity, PERCENT)\n\n    def update_brain(self):\n        # Efficiency\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.set_font(FontType.MONO30)\n        brain.screen.set_pen_color(Color.WHITE)\n        brain.screen.print(\"EFFI: \")\n        for motor in self.MOTORS:\n            motor_efficiency = round(motor.efficiency(PERCENT))\n            pen_color = motor_efficiency > 50 and Color.GREEN or Color.RED\n            brain.screen.set_pen_color(pen_color)\n            brain.screen.print(str(motor_efficiency) + \" \")\n\n        # Temperature\n        brain.screen.set_cursor(2, 1)\n        brain.screen.set_pen_color(Color.WHITE)\n        brain.screen.print(\"TEMP: \")\n        for motor in self.MOTORS:\n            motor_temperature = round(motor.temperature(PERCENT))\n            pen_color = motor_temperature < 50 and Color.GREEN or motor_efficiency < 70 and Color.YELLOW or Color.RED\n            brain.screen.set_pen_color(pen_color)\n            brain.screen.print(str(motor_efficiency) + \" \")\n\n        # Velocity\n        brain.screen.set_cursor(3, 1)\n        brain.screen.set_pen_color(Color.WHITE)\n        brain.screen.print(\"VELO: \")\n        for motor in self.MOTORS:\n            motor_velocity = round(motor.velocity(PERCENT))\n            brain.screen.set_pen_color(Color.WHITE)\n            brain.screen.print(str(motor_efficiency) + \" \")\n\n        # Battery\n        brain.screen.set_cursor(4, 1)\n        battery = round(brain.battery.capacity())\n        pen_color = battery < 20 and Color.RED or battery < 50 and Color.YELLOW or Color.GREEN\n        brain.screen.set_pen_color(pen_color)\n        brain.screen.print(\"BATT: \" + str(battery))\n\n        brain.screen.set_cursor(5, 1)\n        brain.screen.set_pen_color(Color.WHITE)\n        auton_name = self.AUTONS[self.selected_auton][0]\n        brain.screen.print(\"AUTO: \" + auton_name + \" (\" + str(self.selected_auton + 1) + \"/\" + str(len(self.AUTONS)) + \")\")\n\n        # Team Number\n        brain.screen.set_cursor(6, 1)\n        brain.screen.set_pen_color(self.current_team)\n        brain.screen.set_font(FontType.MONO60)\n        brain.screen.print(\"13063B\")\n\n    def driver_controlled(self):\n        controller_1.axis3.changed(self.move_drivetrain)\n        controller_1.axis4.changed(self.move_drivetrain)\n        controller_1.axis1.changed(self.move_drivetrain)  \n\n    def left(self):\n        print(\"Started left...\")\n\n    def left_center(self):\n        print(\"Started left_center...\")\n\n    def left_bonus(self):\n        print(\"Started left_bonus...\")\n\n    def left_center_bonus(self):\n        print(\"Started left_center_bonus...\")\n\n    def right(self):\n        print(\"Started right...\")\n\n    def right_center(self):\n        print(\"Started right_center...\")\n\n    def right_bonus(self):\n        print(\"Started right_bonus...\")\n\n    def right_center_bonus(self):\n        print(\"Started right_center_bonus...\")\n\n    def center(self):\n        print(\"Started center...\")\n\n    def center_leftbonus(self):\n        print(\"Started center_leftbonus...\")\n\n    def center_rightbonus(self):\n        print(\"Started center_rightbonus...\")\n\n    def autonomous(self):\n        self.AUTONS[self.selected_auton][1]()\n\n    def on_auton_pressed(self):\n        self.pressed_time = brain.timer.time(SECONDS)\n\n    def on_auton_released(self):\n        current_time = brain.timer.time(SECONDS)\n        if current_time - self.pressed_time > 1:\n            self.current_team = self.current_team == Color.RED and Color.BLUE or Color.RED\n        else:\n            self.selected_auton += 1\n            if self.selected_auton > len(self.AUTONS) - 1:\n                self.selected_auton = 0\n\ndef __main__():\n    Robot()\n\nif __name__ == '__main__':\n    __main__()","textLanguage":"python","rconfig":[{"port":[1],"name":"front_left_wheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"front_right_wheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"back_left_wheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"back_right_wheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"auton_selector","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}